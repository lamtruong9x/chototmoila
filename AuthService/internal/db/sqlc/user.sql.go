// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, passwd, phone)
VALUES (?, ?, ?)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Passwd   string `json:"passwd"`
	Phone    string `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser, arg.Username, arg.Passwd, arg.Phone)
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone, username, passwd, address, email, isadmin FROM users
WHERE phone = ?
LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (*User, error) {
	row := q.queryRow(ctx, q.getUserByPhoneStmt, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Phone,
		&i.Username,
		&i.Passwd,
		&i.Address,
		&i.Email,
		&i.Isadmin,
	)
	return &i, err
}
